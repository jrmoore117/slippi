/// <reference types="node" />
import { EventEmitter } from "events";
export declare const NETWORK_MESSAGE = "HELO\0";
export declare enum ConnectionEvent {
    HANDSHAKE = "handshake",
    STATUS_CHANGE = "statusChange",
    DATA = "data",
    INFO = "loginfo",
    WARN = "logwarn"
}
export declare enum ConnectionStatus {
    DISCONNECTED = 0,
    CONNECTING = 1,
    CONNECTED = 2,
    RECONNECT_WAIT = 3
}
export declare enum Ports {
    DEFAULT = 51441,
    LEGACY = 666,
    RELAY_START = 53741
}
export interface ConnectionDetails {
    consoleNick: string;
    gameDataCursor: Uint8Array;
    version: string;
    clientToken: number;
}
export interface ConnectionSettings {
    ipAddress: string;
    port: number;
}
/**
 * Responsible for maintaining connection to a Slippi relay connection or Wii connection.
 * Events are emitted whenever data is received.
 *
 * Basic usage example:
 *
 * ```javascript
 * const { ConsoleConnection } = require("@slippi/slippi-js");
 *
 * const connection = new ConsoleConnection();
 * connection.connect("localhost", 667); // You should set these values appropriately
 *
 * connection.on("data", (data) => {
 *   // Received data from console
 *   console.log(data);
 * });
 *
 * connection.on("statusChange", (status) => {
 *   console.log(`status changed: ${status}`);
 * });
 * ```
 */
export declare class ConsoleConnection extends EventEmitter {
    private ipAddress;
    private port;
    private connectionStatus;
    private connDetails;
    private clientsByPort;
    private connectionsByPort;
    constructor();
    /**
     * @returns The current connection status.
     */
    getStatus(): ConnectionStatus;
    /**
     * @returns The IP address and port of the current connection.
     */
    getSettings(): ConnectionSettings;
    /**
     * @returns The specific details about the connected console.
     */
    getDetails(): ConnectionDetails;
    /**
     * Initiate a connection to the Wii or Slippi relay.
     * @param ip   The IP address of the Wii or Slippi relay.
     * @param port The port to connect to.
     * @param timeout Optional. The timeout in milliseconds when attempting to connect
     *                to the Wii or relay. Default: 5000.
     */
    connect(ip: string, port: number, timeout?: number): void;
    private _connectOnPort;
    /**
     * Terminate the current connection.
     */
    disconnect(): void;
    private _getInitialCommState;
    private _processMessage;
    private _handleReplayData;
    private _setStatus;
}
